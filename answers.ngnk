/ Other repos worth viewing:
/ https://codeberg.org/ngn/k/src/branch/master/aoc/22
/ https://github.com/qbists/studyq/tree/main/aoc/2022/q

/ Day 1
x@:>x:+/'0^(&^x)_x:0N,`I$0:"1.txt"
*x
+/3#x


/ Day 2
/ Golfed: https://www.reddit.com/r/adventofcode/comments/zac2v2/2022_day_2_solutions/iylx0d3/
input:"\n"\"A Y\nB X\nC Z"
input:0:"2.txt"
input:+input

kt:`lose`draw`win!("rps"!"srp"
                   "rps"!"rps"
                   "rps"!"psr")
them:("ABC"!"rps")@*input
score:{+/1+("rps"?y)+(3*x=y)+6*y=(kt`win)x}

/ part 1
us:("XYZ"!"rps")@*|input
score[them;us]

/ part 2
result:("XYZ"!`lose`draw`win)@*|input
score[them;(kt result)@'them]


/ Day 3
input:0:"3.txt"
ixn:{x^x^y}
score:{(26*~x=_x)+(_x)-"`"}
+/score@*'ixn/'2 0N#/:input
+/score@*'ixn/'0N 3#input


/ Day 4
input:"\n"\"2-4,6-8\n2-3,4-5\n5-7,7-9\n2-8,3-7\n6-6,4-6\n2-6,4-8"
input:0:"4.txt"
((LL;LR);(RL;RR)):+'+{x@<x}'`I$"-"\''","\'input
+/(~LR<RR)|LL=RL
+/~LR<RL


/ Day 5
/ Variant: https://www.reddit.com/r/adventofcode/comments/zcxid5/2022_day_5_solutions/iyzlwnx/
input:0:"5.txt"
(rawstart;NA;rawmoves):(0,0 1+input?"")_input
start:(^:)_'(^*:')_+|rawstart
moves:-1 1 1*0 -1 -1+`I$(+" "\'rawmoves)1 3 5
next:{[f;x;count;from;to]
      x[to],:f count#x from
      x[from]:count_x from
      x}
:/'(start next[|:]/).moves
:/'(start next[::]/).moves


/ Day 6
input:1:"6.txt"
f:{x+(#'x?:':y)?x}
f[4]input
f[14]input


/ Day 7
/ there are much nicer stack-based solns than this, eg:
/ https://codeberg.org/ngn/k/src/branch/master/aoc/22/07.k
/ https://github.com/shadowninja55/advent-of-code/blob/main/2022/07/7.k
/ https://www.reddit.com/r/adventofcode/comments/zesk40/2022_day_7_solutions/iz8fww6/ (python)
/ no "cd /" aside from at the start, so skipped that case
input:0:"7.txt"
crawl:{$["$ cd .."~y; -1_x
         "$ cd"~4#y; x,`$*|" "\y
         x]}
(paths;sizes):(()crawl\input; 0^`I$*'" "\'input)
depths:|=#'paths
f:{(+/'(.x)@=-1_'!x)++/'z@=y}
seed:(,,`)!,0
dirsizes:{x,y}/f\[seed].+.(paths;sizes)@\:depths

+/(100000<)_dirsizes

spacereqd:30000000-70000000-*|dirsizes
&/(spacereqd>)_dirsizes


/ Day 8 - rough
input:0:"8.txt"
/ input:"\n"\"30373\n25512\n65332\n33549\n35390"

r:+|:         / 2D rotate
rr:(4-!4)r/'  / reverse rotates
+//|/rr@({1&/(*x)>1_x}''|'',\')'r\input
|//*/rr@{1+(-2+#x)^((*x)>+x)?'0}''(!#input)_\:/:r\input


/ Day 21

input:0:"21.txt"

/ Part 1

/ Build a dict of names to statements
x:input?'":"
names:`$x#'input
statements:(2+x)_'input
x:names!statements

/ Wrap compound statements in brackets
x:{$[1=#x;x;(`"("),x,`")"]}'`$" "\'x

/ Map nums, operations and brackets to themselves
nums:$(^:)_`I$'statements
syms:$"()+-*/="
x,:!/2#,`$nums,syms

/ Replace defns until stops changing
a:(,/'x@)/x

/ Find root defn
/ (Hack: Solve the output in Excel as ngn/k has some limit on eval (.))
` 0: ,/$a`root

/ Output spacer
` 0: ""

/ Part 2

/ Override 'humn' defn in input so that it maps to itself
x[`humn]:`humn

/ Replace op of root with = for ease of splitting the output
x,:`root!,@[x`root;2;:;`"="]

/ Manually found the side that didn't have 'humn'
/ and calculated it in Excel (call it v),
/ then copied the other side into an Excel spreadsheet,
/ set name of a cell to 'humn' with dummy value 1,
/ and goal seeked for v by changing cell humn.
a:(,/'x@)/x
` 0: ,/$a`root

\\
